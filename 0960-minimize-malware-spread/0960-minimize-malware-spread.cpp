class DSU {
public:
    vector<int> parent, rank, size;
    DSU(int n) {
        parent.resize(n);
        rank.resize(n, 0);
        size.resize(n, 1);
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }
    int findpar(int node) {
        if (node == parent[node]) {
            return node;
        }
        return parent[node] = findpar(parent[node]);
    }
    void Union(int u, int v) {
        int x = findpar(u);
        int y = findpar(v);
        if (x == y)
            return;
        if (rank[x] > rank[y]) {
            parent[y] = x;
        } else if (rank[y] > rank[x]) {
            parent[x] = y;
        } else {
            parent[x] = y;
            rank[y]++;
        }
    }
    void unionBySize(int u, int v) {
        int x = findpar(u);
        int y = findpar(v);
        if (x == y)
            return;
        if (size[x] > size[y]) {
            parent[y] = x;
            size[x] += size[y];
        } else {
            parent[x] = y;
            size[y] += size[x];
        }
    }
};
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        DSU ds(n);
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++){
                if(graph[i][j])
                {
                    ds.unionBySize(i,j);
                }
            }
        }
        unordered_map<int,int> mp;
        for(auto i:initial)
        {
            mp[ds.findpar(i)]++;
        }
        sort(initial.begin(),initial.end());
        int ind=initial[0],ans=0;
        for(int i=0;i<initial.size();i++)
        {
            int par=ds.findpar(initial[i]);
            if(mp[par]==1)
            {
                if(ds.size[par]>ans)
                {
                    ans=ds.size[par];
                    ind=initial[i];
                }
            }
        }
        return ind;
    }
};